"use strict";
var customFields = {
		schoolnumber : ""
	},
	customData = [],
	User = module.parent.require("./user"),
	Password = module.parent.require("./password"),
	utils = module.parent.require("../public/src/utils"),
	db = module.parent.require('./database'),
	passport = module.parent.require("passport"),
	passportLocal = module.parent.require('passport-local').Strategy,
	nconf = module.parent.require("nconf"),
	request = module.parent.require("request"),
	async = module.parent.require("async"),
	meta = module.parent.require('./meta'),
	CASAuthentication = module.parent.require('cas-authentication'),
	const_pwd = nconf.get("const_pwd"),
	plugin = {};

	var cas = new CASAuthentication({
		cas_url     : 'https://uis.nwpu.edu.cn/cas',
		service_url : 'http://fermion.space',
		cas_version : '2.0'
	});

plugin.load = function(arg, next) {
	var app = arg.app;
	var router = arg.router;
	var middleware = arg.middleware;
	var controllers = arg.controllers;

	router.get( '/authenticate', cas.bounce, function ( req, res ) {
		var schoolnumber = req.session[cas.session_name];

		db.getObjectField('schoolnumber:_key', schoolnumber, function(err, ans) {
			if (err) {
				console.log('err');
			}else {
				// 该用户未登录
				if (ans == null) {
					res.redirect(nconf.get('relative_path') + '/register');
				}else {
					res.send( '<html><body>Hello!' + '</body></html>' );
				}
			}
		});
	});

	router.get( '/api/user', cas.block, function ( req, res ) {
		res.json( { cas_user: req.session[ cas.session_name ] } );
	});

	// 退出登录
	router.get('/logout', cas.logout);

	//App 登录接口
	router.post("/user/login", controllers.authentication.login);

	//通过token登录
	router.get("/user/login", controllers.authentication.login);
	app.use(router);

};

plugin.auth = function() {
	passport.use(new passportLocal({
		passReqToCallback: true
	}, signinWithCode));
};

plugin.customHeaders = function(headers, callback) {
	for(var key in customFields) {

		switch(key) {
			case 'schoolnumber':
				var label = "学号/工号";
				break;
		}

		headers.headers.push({
			label: label
		});
	}

	callback(null, headers);
};

plugin.customFields = function(params, callback) {
	var users = params.users.map(function(user) {

		if (!user.customRows) {
			user.customRows = [];

			for(var key in customFields) {
				user.customRows.push({value: customFields[key]});
			}
		}

		return user;
	});

	callback(null, {users: users});
};

plugin.addField = function(params, callback) {
	for(var key in customFields) {

		if (key == "") {
			callback(null, params);
			return;
		}

		switch(key) {
			case 'schoolnumber':
				var html = '<input class="form-control" type="text" name="schoolnumber" id="schoolnumber" value="2017" placeholder="输入学号/工号"><span class="custom-feedback" id="schoolnumber-notify"></span>';
				var label = "学号/工号";
				break;
		}

		var captcha = {
			label: label,
			html: html
		};

		if (params.templateData.regFormEntry && Array.isArray(params.templateData.regFormEntry)) {
			params.templateData.regFormEntry.push(captcha);
		} else {
			params.templateData.captcha = captcha;
		}
	}

	callback(null, params);
};

plugin.checkField = function(params, callback) {
	var userData = params.userData;
	var error = null;

	for(var key in customFields) {

		var value = userData[key];

		console.log(params);
		var schoolnumber = params.req.session[cas.session_name];

		if (value == "" || value == undefined || value != schoolnumber) {
			error = {message: '学号/工号错误'};
		}
	}

	callback(error, params);
};

plugin.creatingUser = function(params, callback) {
	customData.push(params.data['schoolnumber']);

	callback(null, params);
};

plugin.createdUser = function(params) {
	var addCustomData = {
		schoolnumber : customData[0].value
	}

	var keyID = 'user:' + params.uid + ':ns:custom_fields';

	db.setObject(keyID, addCustomData, function(err) {
		if (err) {
			return callback(err);
		}
	});
};

plugin.addToApprovalQueue = function(params, callback) {
	var data = params.data;
	var userData = params.userData;

	data.customRows = [];

	for (var key in customFields) {

		switch(key) {
			case 'schoolnumber':
				var fieldData = params.userData['schoolnumber'];
				break;
		}

		customFields[key] = fieldData;
		data.customRows.push({value: customFields[key]});
	}

	callback(null, {data: data, userData: userData});
};

function signinWithUserName(req, username, password, next) { //用户名登录
	console.log("signingWithUserName...");
	var userslug = utils.slugify(username);
	var uid, userData = {};
	async.waterfall([
		function(next) {
			User.isPasswordValid(password, next);
		},
		function(next) {
			User.getUidByUserslug(userslug, next);
		},
		function(_uid, next) {
			uid = _uid;
			User.auth.logAttempt(uid, req.ip, next);
		},
		function(next) {
			async.parallel({
				userData: function(next) {
					db.getObjectFields('user:' + uid, ['password', 'banned', 'passwordExpiry'], next);
				},
				isAdmin: function(next) {
					User.isAdministrator(uid, next);
				}
			}, next);
		},
		function(result, next) {
			userData = result.userData;
			userData.uid = uid;
			userData.isAdmin = result.isAdmin;

			if (!result.isAdmin && parseInt(meta.config.allowLocalLogin, 10) === 0) {
				return next(new Error('[[error:local-login-disabled]]'));
			}

			if (!userData || !userData.password) {
				return next(new Error('[[error:invalid-user-data]]'));
			}
			if (userData.banned && parseInt(userData.banned, 10) === 1) {
				return next(new Error('[[error:user-banned]]'));
			}
			Password.compare(password, userData.password, next);
		},
		function(passwordMatch, next) {
			if (!passwordMatch) {
				return next(new Error('[[error:invalid-password]]'));
			}
			User.auth.clearLoginAttempts(uid);
			next(null, userData, '[[success:authentication-successful]]');
		}
	], next);

}

//首次登录需要在平台创建一个用户,之后登录则验证用户存在即可
function signinWithCode(req, username, password, next) {
	console.log("username:", username);
	console.log("password:", password);
	if (!username) {
		return next(new Error('[[error:invalid-username]]'));
	}

	return signinWithUserName(req, username, password, next);
}

module.exports = plugin;